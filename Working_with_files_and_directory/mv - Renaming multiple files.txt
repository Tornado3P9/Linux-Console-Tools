# Renaming multiple files with the mv and the rename Command:
#https://www.howtogeek.com/423214/how-to-use-the-rename-command-on-linux/
#https://linuxize.com/post/how-to-rename-files-in-linux/
#
# The mv command can rename only one file at a time, but it can be used in conjunction with other commands
# such as find or inside bash for or while loops to rename multiple files.
# The following example shows how to use the Bash for loop to rename all .html files in the current directory
# by changing the .html extension to .php

for f in *.html; do
  mv -- "$f" "${f%.html}.php"
done

# Letâ€™s analyze the code line by line:
# - The first line creates a for loop and iterates through a list of all files edging with .html
# - The second line applies to each item of the list and moves the file to a new one replacing .html with .php
#   The part ${file%.html} is using the shell parameter expansion to remove the .html part from the filename
# - done indicates the end of the loop segment


# Better Way:
sudo apt install rename

rename --version
rename --help

rename 's/chooseOldTextPartUsingRegex/changeTo/' *.m4a

# Delete each '#' in all filenames by leaving the changeTo part empty:
rename 's/#//' *.m4a

# You can use the -n option to print names of files to be renamed, without renaming them.
rename -n 's/.html/.php/' \*.html

# Replace spaces in filenames with underscores
rename 'y/ /\_/' \*

# Convert filenames to lowercase
rename 'y/A-Z/a-z/' \*

# Convert filenames to uppercase
rename 'y/a-z/A-Z/' \*


# Alternative
for filename in ./*; do mv "./$filename" "./$(echo "$filename" | sed -e 's/test.extra//g')";  done

