(In Arbeit!)
    ##########################
    ## Docker
    ##########################

    # arm64
    https://docs.docker.com/engine/install/binaries/

    # On Ubuntu you can just type:
    sudo apt install docker.io
    # You probably still want to change some configurations, but the complete standard setup is being done for you.

    # Manage Docker as a non-root user
    https://docs.docker.com/engine/install/linux-postinstall/

    # Get Docker IP
    docker-machine ip

    # Delete(prune) unused container  https://docs.docker.com/config/pruning/
    docker container prune

    # Delete(prune) unused container and more  https://docs.docker.com/engine/reference/commandline/system_prune/
    docker system prune [OPTIONS]

    ========================================================================

    # https://docs.docker.com/engine/install/debian/
    # https://docs.docker.com/engine/install/ubuntu/
    # OR use a script:
    # https://www.electromaker.io/tutorial/blog/get-started-with-docker-on-the-raspberry-pi

        #To begin the Docker installer, run:
        curl -sSL https://get.docker.com | sh

    #Now, Docker should be installed. You'll want to make a few manual configurations before
    #using Docker on the Pi. To auto-start Docker, in a command prompt enter:
    sudo systemctl enable docker

    #Then, reboot or start the Docker daemon using:
    sudo systemctl start docker

    #After that, we'll need to enable the Docker client, since only root or members of a Docker group may run Docker on the Pi:
    sudo usermod -aG docker $(whoami)

    #However, you might wish to run Docker without entering sudo every time. To run Docker without sudo, first add the Docker group:
    sudo groupadd docker

    #Then, create a connected user for your Docker group. You can change this user name if you'd rather not use the current user:
    sudo gpasswd -a $USER docker

    #Next, to manifest your changes, run:
    newgrp docker

    #Test that Docker is properly working by entering:
    docker run hello-world

    #If everything went as planned, you should see the message "Hello from Docker!" along with some basic information.




    ##########################
    ## Buildx for multi-architecture image builds
    ##########################
    # https://www.docker.com/blog/getting-started-with-docker-for-arm-on-linux/
    # https://github.com/docker/buildx#binary-release
    # https://docs.docker.com/buildx/working-with-buildx/
    # There are three options to get buildx on Linux:
    # - Use buildx directly from the test channel version of Docker
    # - Download a binary release of buildx and copy it to the $HOME/.docker directory (https://github.com/docker/buildx#binary-release)
    # - Download, build, and install buildx from github.com





    ##########################
    ## Creating a new Docker Image on a Raspberry Pi Server
    ## https://hub.docker.com/search?architecture=arm64&source=verified&type=image
    ## https://news.ycombinator.com/item?id=10782897
    ##########################
    
    # ssh into the Pi (ssh user@ip-adress)
    ssh pi@192.168.0.20

    # create new working directory
    mkdir Docker_Folder

    # Or first create the folder on your local machine and then copy it with scp
    scp -r -P 22 Docker_Folder/ pi@192.168.0.20:~

    # On Windows Machines you can use WinSCP, FileZilla, Putty,..

    # go into the folder and create the files that will be used by docker
    cd Docker_Folder
    touch Dockerfile exec_configs.sh file3 file4
    # write your configurations into the docker file

        # Step 1: Specify a base image
        FROM node:alpine

        WORKDIR ~/activeworkdir

        # Step 2: Install some depenendencies
        COPY ./ ./
        RUN npm install
        RUN apk add --update gcc

        # Step 3: Tell the image what to do when it starts as container
        CMD ["npm", "start"]


    # write your configurations into the exec_configs.sh file
        # Step 1: make binary executable
        chmod +x program
        # Step 2: make all the changes that are still left to make
        ...

    # build the new docker image
    docker build .

    # Alternatively if you want to use names instead of long ids
    docker build -t imagename/projektname .

    # Run the Container, while not forgetting to open for outside access!
    # Route incoming requests to the port on local host (left 8080)
    # to this port inside the container (right 8080)
    docker run -p 8080:8080 imagename/projektname






    # Use Docker-Compose for starting multiple containers with active connection
    touch docker-compose.yml
    ...






    # Use Docker Volumes for saving data as it is stored directly on the host system
    # while being managed by docker. Latency is being reduced when using volumes.









    ##########################
    ## Other useful docker commands
    ##########################

    # get shell access to the container
    docker exec -it containerid sh

    # start container with an open shell session. remember that this way just one process can be run at the same time
    docker run -it containerid sh

