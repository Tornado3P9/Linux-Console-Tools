
    ###############################
    ## Deleting a Specific Line From a Text File in Command Line in Linux
    ###############################
    # https://www.systutorials.com/how-to-delete-a-specific-line-from-a-text-file-in-command-line-on-linux/
    # https://www.cyberciti.biz/faq/using-sed-to-delete-empty-lines/
 
    # Remove the line matching by a regular expression REGULAR:
    sed '/REGULAR/d' ./file

    # For a simple example, remove the lines containing “oops”:
    sed '/oops/d' ./file

    # To delete all empty lines from a file called /tmp/data.txt, enter:
    sed '/^$/d' /tmp/data.txt

    # To store output to another file use redirection operator or pipe the output to 'tee' which displays the output at the same time:
    sed '/^$/d' /tmp/data.txt > /tmp/output.txt
    sed '/^$/d' /tmp/data.txt | tee /tmp/output.txt

    # OR update the file using -i option:
    sed -i '/^$/d' /tmp/data.txt 

    # We type the following to change all occurrences of “day” to “week,” and give the mariner and albatross more time to bond:
    sed -n 's/day/week/p' coleridge.txt
    # In the first line, only the second occurrence of “day” is changed. This is because sed stops after the first match per line. We have to add a “g” at the end of the expression, as shown below, to perform a global search so all matches in each line are processed:
    sed -n 's/day/week/gp' coleridge.txt
    # This matches three out of the four in the first line. Because the first word is “Day,” and sed is case-sensitive, it doesn’t consider that instance to be the same as “day.”
    # We type the following, adding an i to the command at the end of the expression to indicate case-insensitivity:
    sed -n 's/day/week/gip' coleridge.txt
    # This works, but you might not always want to turn on case-insensitivity for everything. In those instances, you can use a regex group to add pattern-specific case-insensitivity.
    # For example, if we enclose characters in square brackets ([]), they’re interpreted as “any character from this list of characters.”
    # We type the following, and include “D” and “d” in the group, to ensure it matches both “Day” and “day”:
    sed -n 's/[Dd]ay/week/gp' coleridge.txt


    ## awk
    # The awk command offers a much simpler solution as compared to sed command. In this example, remove all empty lines using awk:
    awk 'NF' my_input > my_output
