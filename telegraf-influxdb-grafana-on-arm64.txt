
###########################
## InfluxDB
###########################
# https://docs.influxdata.com/influxdb/v2.0/install/?t=Linux

### Download and verify influxdb

https://dl.influxdata.com/influxdb/releases/influxdb2-2.0.9-linux-arm64.tar.gz
curl -s https://repos.influxdata.com/influxdb2.key | gpg --import -
wget https://dl.influxdata.com/influxdb/releases/influxdb2-2.0.9-linux-arm64.tar.gz.asc
gpg --verify influxdb2-2.0.9-linux-arm64.tar.gz.asc influxdb2-2.0.9-linux-arm64.tar.gz

#echo "Wir erwarten eine Nachricht, wie"
#echo "gpg: Good signature from "InfluxData <support@influxdata.com>" [unknown]"
#read -p "EnterTaste zum Fortfahren oder Strg+C zum Abbrechen:"

### Extract, Copy, Execute

# Unpackage contents to the current working directory
tar xvzf influxdb2-2.0.9-linux-arm64.tar.gz

# Copy the influx and influxd binary to your $PATH
sudo cp influxdb2-2.0.9-linux-arm64/{influx,influxd} /usr/local/bin/

# Open firewall ports 8086/tcp (influxdb) and 3000/tcp (grafana)
sudo ufw allow 8086/tcp
sudo ufw allow 3000/tcp

# Change working directory and execute influxd
cd /usr/local/bin/ && ls
./influxd
# Or just "influxdb" as we put it in a folder that is listed in the PATH variable. check by typing "echo $PATH"

# In the web browser (ip-adress instead of localhost of course when accessing from another PC)
http://localhost:8086/

###########################
## Telegraf
###########################
# Automaticly

# Install telegraf
wget -qO- https://repos.influxdata.com/influxdb.key | sudo tee /etc/apt/trusted.gpg.d/influxdb.asc >/dev/null
source /etc/os-release
echo "deb https://repos.influxdata.com/${ID} ${VERSION_CODENAME} stable" | sudo tee /etc/apt/sources.list.d/influxdb.list
sudo apt-get update && sudo apt-get install telegraf

# Create custom telegraf.conf
telegraf --section-filter agent:inputs:outputs --input-filter systemd_units:tail:execd --output-filter file:cloudwatch_logs config > telegraf.conf

# Edit custom telegraf.conf
nano telegraf.conf
sudo mv telegraf.conf /etc/telegraf/

========================================
# Or Manually
# https://portal.influxdata.com/downloads/
# https://docs.influxdata.com/telegraf/v1.20/introduction/getting-started/

### Download and verify telegraf
wget https://dl.influxdata.com/telegraf/releases/telegraf-1.20.2_linux_arm64.tar.gz
echo "9d93ba3c7e78a9b3094bf570e427eb238296895c35fabddaaefdb26265cdbd0f *telegraf-1.20.2_linux_arm64.tar.gz" | shasum -a 256 --check
 
### Extract
tar xf telegraf-1.20.2_linux_arm64.tar.gz

### Generate config file
# For this you have to go the directory that has got the telegraf binary file
tree telegraf-1.20.2
cd telegraf-1.20.2/usr/bin/ && ls
./telegraf config > telegraf.conf
#./telegraf --section-filter agent:inputs:outputs --input-filter systemd_units:tail:execd --output-filter cloudwatch_logs config > telegraf.conf

# edit telegraf.conf
nano telegraf.conf
sudo mkdir /etc/telegraf
sudo mv telegraf.conf /etc/telegraf/
# (optionally) after editing 'telegraf.conf' remove inactive or empty lines to enhance usability => https://github.com/Tornado3P9/Konsolentools/blob/master/Texteditor/sed.txt

### execute telegraf
./telegraf

# Wenn man influxdb benutzt und unvollständige Einstellungen dazu führen, dass telegraf die Datenbank nicht erreichen kann,
# dann erst die Weboberfläche von influxdb aufrufen und sich dort z.B. das INFLUX_TOKEN holen und gemäß der dortigen Anleitung Telegraf ausführen.
# telegraf --config http://...:8086/api/v2/telegraf/...

### Create Systemd-Job to automate execution of the binary
# (Optionally) first create a soft link or add the binary to the PATH variable so that we can execute just using "telegraf" from anywhere instead of "./telegraf"
sudo ln -s $(pwd)/telegraf /usr/bin/telegraf
# (Optionally) checking created link
ls -lF /usr/bin/telegraf

# Create the systemctl.service file
sudo nano /etc/systemd/system/mytelegraf.service

# https://github.com/Tornado3P9/Konsolentools/blob/master/terminal_taskmanager/systemd_systemctl.txt

========================================
# Alternatively using docker: https://hub.docker.com/_/telegraf/
# Dabei daran denken, dass Container vom Hostsystem abgekapselt sind.
# Will man also docker den Zugriff auf logfiles des hostsystems zulassen, so muss man dies ausdrücklich erlauben.
# Beispiel:

docker run -d --name=telegraf \
  -v $PWD/telegraf.conf:/etc/telegraf/telegraf.conf:ro \
  -v /:/hostfs:ro \
  -e HOST_ETC=/hostfs/etc \
  -e HOST_PROC=/hostfs/proc \
  -e HOST_SYS=/hostfs/sys \
  -e HOST_VAR=/hostfs/var \
  -e HOST_RUN=/hostfs/run \
  -e HOST_MOUNT_PREFIX=/hostfs \
  telegraf


###########################
## Grafana
###########################
# https://grafana.com/docs/grafana/latest/installation/debian/
# https://grafana.com/grafana/download?edition=oss&platform=arm

wget https://dl.grafana.com/oss/release/grafana-8.2.1.linux-arm64.tar.gz
echo "ad7e928f75fa51ec6e2ca39ca3ceca14608da982a01b7ae29b65885214c83af5 *grafana-8.2.1.linux-arm64.tar.gz" | shasum -a 256 --check

tar -zxvf grafana-8.2.1.linux-arm64.tar.gz

cd grafana-8.2.1/bin/
./grafana-server web

# In the web browser (ip-adress instead of localhost of course when accessing from another PC)
http://localhost:3000/


